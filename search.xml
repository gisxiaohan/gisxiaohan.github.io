<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记录心情20240220-提前返校</title>
      <link href="/2024/02/20/%E8%AE%B0%E5%BD%95%E5%BF%83%E6%83%8520240220/"/>
      <url>/2024/02/20/%E8%AE%B0%E5%BD%95%E5%BF%83%E6%83%8520240220/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>心随天地走，意被牛羊牵</strong></p></blockquote><hr><blockquote><p>祈安初九就要回烟台。</p><p>我们提前两天来南京，拍了生日照。</p><p>我正月15才开学，就不回家了，直接去学校了。</p><p>分别时总是很难过，很舍不得。</p><p>再见，期待下次见面。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究生生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录心情20240114</title>
      <link href="/2024/01/14/%E8%AE%B0%E5%BD%95%E5%BF%83%E6%83%8520240114/"/>
      <url>/2024/01/14/%E8%AE%B0%E5%BD%95%E5%BF%83%E6%83%8520240114/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>心随天地走，意被牛羊牵</strong></p></blockquote><hr><p>自从元旦假期之后，我的心就一点也不在学习工作上了。</p><p>元旦去了合肥，见了本科室友，回了AHU，感慨万千。时间飞快，青春再也回不去了。返回南京后，心收不回来了，一直想玩，想放假，想回家，反正就是不想在工位。</p><p>想一想自己还有很多很多东西没学，就很烦躁，但是又学不下去。例如想学JAVA基础，gis开发的前端库，ol,cesuim等等，web框架，flask等，以及nginx,docker,k8s，太多了。</p><p>懂的越多，不懂的越多，怎么学啊！纯想摆烂。</p><p>如何有计划、高效且持续的学习呢？？？？</p><p>我真是三分钟热度，浅学则止，hxh啊hxh，不能再这样下去了！</p><p>算了，别内耗了，玩会吧，启动！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究生生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TGRS论文发表！</title>
      <link href="/2023/11/29/TGRS%E8%AE%BA%E6%96%87%E5%8F%91%E8%A1%A8%EF%BC%81/"/>
      <url>/2023/11/29/TGRS%E8%AE%BA%E6%96%87%E5%8F%91%E8%A1%A8%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这算的是本科期间最厉害的一个成就！本科一作SCI TOP，也是学院历史第一个！</p><p>这个项目是我真正地进入科研，并针对问题提出自己的创新点，理论分析，设计实验，实验验证，精度评定，论文写作。</p><p>我从中收获良多，也十分感谢吴老师的悉心指导，与两位师妹后期的验证实验。</p><p>学院也发布了新闻<a href="https://zhxy.ahu.edu.cn/2023/1129/c11421a323557/page.htm">我院本科生以第一作者在IEEE TGRS发表学术论文 (ahu.edu.cn)</a>，很有自豪感！圆满的本科生涯！</p><p>我爱安大❤️❤️❤️</p><p>爱资环❤️❤️❤️！</p></blockquote><p><img src="/2023/11/29/TGRS%E8%AE%BA%E6%96%87%E5%8F%91%E8%A1%A8%EF%BC%81/IEEE-TGRS-paper.png"></p><p><img src="/2023/11/29/TGRS%E8%AE%BA%E6%96%87%E5%8F%91%E8%A1%A8%EF%BC%81/%E6%96%B0%E9%97%BB.png"></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
            <tag> SCI TOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>很久没冒泡喽</title>
      <link href="/2023/11/11/%E5%A5%BD%E4%B9%85%E6%B2%A1%E5%86%92%E6%B3%A1%E5%96%BD/"/>
      <url>/2023/11/11/%E5%A5%BD%E4%B9%85%E6%B2%A1%E5%86%92%E6%B3%A1%E5%96%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>忘记从什么时候开始就没在管这个博客。</p><p>这段时间，过得也还不错。</p><p>应该补上的博客有：烟台之旅、近期学习情况、近期有趣的事情（买卖电脑、卖硬盘，好像事情还是很多的）、心路历程哈哈哈哈哈哈哈</p><p>坚持一件事情很难哦</p><p>由于更换了新的电脑，所有的环境都要重新配置，之前用的图床不知道咋回事也不行了，很多东西都忘记了，先写个博客测试下😊</p></blockquote><p>![屏幕截图 2023-11-11 214119](屏幕截图 2023-11-11 214119.png)</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel-2批处理相关代码</title>
      <link href="/2023/09/11/%E5%93%A8%E5%85%B5%E4%BA%8C%E5%8F%B7%E6%89%B9%E5%A4%84%E7%90%86/"/>
      <url>/2023/09/11/%E5%93%A8%E5%85%B5%E4%BA%8C%E5%8F%B7%E6%89%B9%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p> <strong>前言</strong></p><blockquote><p>AI Earth提供了L2A级产品。此外，GEE PIE平台也可以进行检索下载。但是！我花了两天时间，这两个平台都不好用，很卡很卡，挂了梯子也卡，只能放弃。由于哨兵二号一些数据下架了，需要激活，而两次激活之间需要间隔一定时间，md，导致我批量下载的时候巨慢！</p><p>阿里云平台的AI Earth还是好用，下载速度快，下架产品激活快，缺点是不能批量勾选，很难想象这个平台没有批量勾选操作功能！算了算了，下载快就行了。</p><p>花了一天时间，写了Sentinel-2批处理的相关程序。哨兵二号下载的文件夹嵌套令人泪目啊。</p><p>1、批量解压，按日期存放</p><p>2、批量转换为tif格式，按日期、分辨率存放</p><p>3、批量融合波段，按日期、分辨率存放</p><p>4、批量拼接&#x2F;裁剪，按日期、分辨率存放</p><p>写好这些代码后，后面有需求简单改改就行了。</p></blockquote><h1 id="批量解压，按日期存放"><a href="#批量解压，按日期存放" class="headerlink" title="批量解压，按日期存放"></a>批量解压，按日期存放</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2023/9/11 15:31</span></span><br><span class="line"><span class="comment"># @Author  : huangxiaohan</span></span><br><span class="line"><span class="comment"># @Site    : </span></span><br><span class="line"><span class="comment"># @File    : batch_unzip_sentinel.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://zhuanlan.zhihu.com/p/531506915?utm_id=0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">该模块功能：</span></span><br><span class="line"><span class="string">只需要提供压缩文件（zip格式）所在的路径，代码会自动遍历该路径下</span></span><br><span class="line"><span class="string">所有的zip文件，并将其解压缩，保存的指定的保存路径中</span></span><br><span class="line"><span class="string">解压后按照日期存放（可能需要同一多幅影像进行拼接）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">un_zip</span>(<span class="params">filename, output_dir</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解压zip文件</span></span><br><span class="line"><span class="string">    :param filename: 解压文件路径</span></span><br><span class="line"><span class="string">    :param output_dir: 输出路径</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filename):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您输入的压缩包文件不存在，请检查路径！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        zip_file = zipfile.ZipFile(filename)</span><br><span class="line">        members = zip_file.namelist()</span><br><span class="line">        decompress_dir = output_dir</span><br><span class="line">        <span class="keyword">for</span> member <span class="keyword">in</span> members:</span><br><span class="line">            zip_file.extract(member, decompress_dir)</span><br><span class="line">        zip_file.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    output_dir = <span class="string">&#x27;F:/PoyangLake/poyanghu_data/test/unzip/&#x27;</span></span><br><span class="line">    zipfile_path = <span class="string">&#x27;F:/PoyangLake/poyanghu_data/test/origin/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 建立所有日期的文件夹</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(zipfile_path):</span><br><span class="line">        s2_date = file.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">2</span>][:<span class="number">8</span>]</span><br><span class="line">        out_dir = os.path.join(output_dir,s2_date)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(out_dir):</span><br><span class="line">            os.mkdir(out_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解压，按日期存放</span></span><br><span class="line">    num = <span class="built_in">len</span>(os.listdir(zipfile_path))</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(zipfile_path):</span><br><span class="line">        n = n+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> os.path.splitext(os.path.basename(file))[<span class="number">1</span>] == <span class="string">&#x27;.zip&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(file,<span class="string">&#x27;解压中...&#x27;</span>,<span class="string">&#x27;进度:&#x27;</span>,n,<span class="string">&#x27;---&#x27;</span>,num)</span><br><span class="line">            filepath = os.path.join(zipfile_path, file)</span><br><span class="line">            <span class="comment"># 截取日期  20220804</span></span><br><span class="line">            s2_date = file.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">2</span>][:<span class="number">8</span>]</span><br><span class="line">            <span class="comment"># 放到对应文件夹</span></span><br><span class="line">            output_path = os.path.join(output_dir,s2_date)</span><br><span class="line">            un_zip(filepath, output_path)</span><br></pre></td></tr></table></figure><h1 id="批量转换为tif格式，按日期、分辨率存放"><a href="#批量转换为tif格式，按日期、分辨率存放" class="headerlink" title="批量转换为tif格式，按日期、分辨率存放"></a>批量转换为tif格式，按日期、分辨率存放</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2023/9/11 15:46</span></span><br><span class="line"><span class="comment"># @Author  : huangxiaohan</span></span><br><span class="line"><span class="comment"># @Site    : </span></span><br><span class="line"><span class="comment"># @File    : batch_jp2tif_sentinel.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">按日期文件夹进行读取</span></span><br><span class="line"><span class="string">批量转换为tif格式后</span></span><br><span class="line"><span class="string">在日期文件夹下建立/R10m /R20m /R60米子文件夹进行存放</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> osgeo <span class="keyword">import</span> gdal</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jp2Totif</span>(<span class="params">jp2_path,save_path,file_name</span>):</span><br><span class="line">    file_name = os.path.splitext(file_name)[<span class="number">0</span>]</span><br><span class="line">    save_file = os.path.join(save_path,file_name)</span><br><span class="line">    save_file = save_file+<span class="string">&#x27;.tif&#x27;</span></span><br><span class="line">    dataset = gdal.Open(jp2_path)</span><br><span class="line">    rows = dataset.RasterYSize</span><br><span class="line">    cols = dataset.RasterXSize</span><br><span class="line">    projection = dataset.GetProjection()</span><br><span class="line">    trans = dataset.GetGeoTransform()</span><br><span class="line">    data = dataset.ReadAsArray()</span><br><span class="line">    <span class="keyword">if</span> data.dtype == <span class="string">&#x27;uint16&#x27;</span>:</span><br><span class="line">        driver = gdal.GetDriverByName(<span class="string">&#x27;GTiff&#x27;</span>)</span><br><span class="line">        out_dataset = driver.Create(save_file, cols, rows, <span class="number">1</span>, gdal.GDT_UInt16)</span><br><span class="line">        out_dataset.SetProjection(projection)</span><br><span class="line">        out_dataset.SetGeoTransform(trans)</span><br><span class="line">        out_dataset.GetRasterBand(<span class="number">1</span>).WriteArray(data)</span><br><span class="line">        out_dataset.GetRasterBand(<span class="number">1</span>).SetNoDataValue(<span class="number">0</span>)</span><br><span class="line">        out_dataset.FlushCache()</span><br><span class="line">        <span class="keyword">del</span> dataset, out_dataset</span><br><span class="line">    <span class="keyword">elif</span> data.dtype == <span class="string">&#x27;uint8&#x27;</span>:</span><br><span class="line">        driver = gdal.GetDriverByName(<span class="string">&#x27;GTiff&#x27;</span>)</span><br><span class="line">        out_dataset = driver.Create(save_file, cols, rows, <span class="number">1</span>, gdal.GDT_Byte)</span><br><span class="line">        out_dataset.SetProjection(projection)</span><br><span class="line">        out_dataset.SetGeoTransform(trans)</span><br><span class="line">        out_dataset.GetRasterBand(<span class="number">1</span>).WriteArray(data)</span><br><span class="line">        out_dataset.GetRasterBand(<span class="number">1</span>).SetNoDataValue(<span class="number">0</span>)</span><br><span class="line">        out_dataset.FlushCache()</span><br><span class="line">        <span class="keyword">del</span> dataset, out_dataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    input_dir = <span class="string">&#x27;F:/PoyangLake/poyanghu_data/test/unzip/&#x27;</span></span><br><span class="line">    output_dir = <span class="string">&#x27;F:/PoyangLake/poyanghu_data/test/tif/&#x27;</span></span><br><span class="line">    <span class="comment"># 建立日期文件夹</span></span><br><span class="line">    <span class="keyword">for</span> date <span class="keyword">in</span> os.listdir(input_dir):</span><br><span class="line">        date_dir = os.path.join(output_dir,date) <span class="comment"># ././tif/20220804</span></span><br><span class="line">        os.mkdir(date_dir)</span><br><span class="line">        os.mkdir(date_dir + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;R10m&#x27;</span>)</span><br><span class="line">        os.mkdir(date_dir + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;R20m&#x27;</span>)</span><br><span class="line">        os.mkdir(date_dir + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;R60m&#x27;</span>)</span><br><span class="line">    <span class="comment"># 日期遍历</span></span><br><span class="line">    <span class="keyword">for</span> date <span class="keyword">in</span> os.listdir(input_dir):</span><br><span class="line">        date_dir = os.path.join(input_dir,date) <span class="comment"># ./././20220804</span></span><br><span class="line">        <span class="keyword">for</span> subdir <span class="keyword">in</span> os.listdir(date_dir):</span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(os.path.join(date_dir, subdir)):</span><br><span class="line">                root_subdir = os.path.join(date_dir, subdir)  <span class="comment"># ./././20220804/S2文件夹</span></span><br><span class="line">                subdir2 = root_subdir + <span class="string">&#x27;/&#x27;</span>+<span class="string">&#x27;GRANULE&#x27;</span> <span class="comment"># ./././20220804/S2文件夹/GRANULE</span></span><br><span class="line">                subdir3 = subdir2 + <span class="string">&#x27;/&#x27;</span> + os.listdir(subdir2)[<span class="number">0</span>]  <span class="comment"># ./././20220804/S2文件夹/GRANULE/L2A_T50RLT_A037166_20220804T025911/</span></span><br><span class="line">                subdir4 = subdir3 + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;IMG_DATA&#x27;</span> <span class="comment"># ./././20220804/S2文件夹/GRANULE/L2A_T50RLT_A037166_20220804T025911/IMG_DATA</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> os.listdir(subdir4):</span><br><span class="line">                    <span class="comment"># 此时的k为各个分辨率文件夹名R10m R20m R60m</span></span><br><span class="line">                    subdir5 = subdir4 + <span class="string">&#x27;/&#x27;</span> + k  <span class="comment"># ./././R10m</span></span><br><span class="line">                    <span class="keyword">for</span> l <span class="keyword">in</span> os.listdir(subdir5):</span><br><span class="line">                        <span class="comment"># l为各个jp2文件</span></span><br><span class="line">                        band = l.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">2</span>]</span><br><span class="line">                        <span class="comment"># 需要转换的波段</span></span><br><span class="line">                        <span class="keyword">if</span> band == <span class="string">&#x27;B04&#x27;</span> <span class="keyword">or</span> band == <span class="string">&#x27;B03&#x27;</span> <span class="keyword">or</span> band == <span class="string">&#x27;B02&#x27;</span>:</span><br><span class="line">                            jp2_path = subdir5+<span class="string">&#x27;/&#x27;</span>+ l</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&#x27;jp2_path:&#x27;</span>, jp2_path)</span><br><span class="line">                            <span class="comment"># 设置输出路径 tif/20220804/R10m</span></span><br><span class="line">                            out_path = os.path.join(output_dir,date,k)</span><br><span class="line">                            jp2Totif(jp2_path, out_path, l)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="批量融合波段，按日期、分辨率存放"><a href="#批量融合波段，按日期、分辨率存放" class="headerlink" title="批量融合波段，按日期、分辨率存放"></a>批量融合波段，按日期、分辨率存放</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2023/9/11 20:07</span></span><br><span class="line"><span class="comment"># @Author  : huangxiaohan</span></span><br><span class="line"><span class="comment"># @Site    : </span></span><br><span class="line"><span class="comment"># @File    : batch_bandcom_sentinel.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">将相同分辨率的单波段影像进行融合</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">目录结构</span></span><br><span class="line"><span class="string">/</span></span><br><span class="line"><span class="string">---20220824/</span></span><br><span class="line"><span class="string">        ---R10m/T50RLT_20220906T025541_B02_10m.tif、T50RMS_20220906T025541_B02_10m.tif</span></span><br><span class="line"><span class="string">        ---R20m/</span></span><br><span class="line"><span class="string">        ---R60m/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">同一文件夹内，文件的前6个字符相同，进行波段组合</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> osgeo <span class="keyword">import</span> gdal</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">band_classify</span>(<span class="params">band_names</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    按照区域进行分类</span></span><br><span class="line"><span class="string">    :param band_name:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    classified_strings = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> band_names:</span><br><span class="line">        key = string[:<span class="number">6</span>]  <span class="comment"># 假设按照前6个字符分类</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> classified_strings:</span><br><span class="line">            classified_strings[key].append(string)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            classified_strings[key] = [string]</span><br><span class="line">    <span class="keyword">return</span> classified_strings</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bandcombination</span>(<span class="params">input_path,out_path</span>):</span><br><span class="line">    <span class="keyword">for</span> date <span class="keyword">in</span> os.listdir(input_path):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;日期&#x27;</span>,date)</span><br><span class="line">        r10m_dir = input_path + <span class="string">&#x27;/&#x27;</span> + date + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;R10m&#x27;</span></span><br><span class="line">        r20m_dir = input_path + <span class="string">&#x27;/&#x27;</span> + date + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;R20m&#x27;</span></span><br><span class="line">        r60m_dir = input_path + <span class="string">&#x27;/&#x27;</span> + date + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;R60m&#x27;</span></span><br><span class="line"></span><br><span class="line">        r10m_bands = os.listdir(r10m_dir)</span><br><span class="line">        r20m_bands = os.listdir(r20m_dir)</span><br><span class="line">        r60m_bands = os.listdir(r60m_dir)</span><br><span class="line">        <span class="comment"># 过滤下tif</span></span><br><span class="line">        r10m_bands = [x <span class="keyword">for</span> x <span class="keyword">in</span> r10m_bands <span class="keyword">if</span> os.path.splitext(x)[<span class="number">1</span>] == <span class="string">&#x27;.tif&#x27;</span>]</span><br><span class="line">        r20m_bands = [x <span class="keyword">for</span> x <span class="keyword">in</span> r20m_bands <span class="keyword">if</span> os.path.splitext(x)[<span class="number">1</span>] == <span class="string">&#x27;.tif&#x27;</span>]</span><br><span class="line">        r60m_bands = [x <span class="keyword">for</span> x <span class="keyword">in</span> r60m_bands <span class="keyword">if</span> os.path.splitext(x)[<span class="number">1</span>] == <span class="string">&#x27;.tif&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        r10m_bands = band_classify(r10m_bands)</span><br><span class="line">        r20m_bands = band_classify(r20m_bands)</span><br><span class="line">        r60m_bands = band_classify(r60m_bands)</span><br><span class="line">        <span class="comment"># 过滤下tif文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        os.makedirs(out_path + <span class="string">&#x27;/&#x27;</span> + date + <span class="string">&#x27;/R10m&#x27;</span>)</span><br><span class="line">        os.makedirs(out_path + <span class="string">&#x27;/&#x27;</span> + date + <span class="string">&#x27;/R20m&#x27;</span>)</span><br><span class="line">        os.makedirs(out_path + <span class="string">&#x27;/&#x27;</span> + date + <span class="string">&#x27;/R60m&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key,bands <span class="keyword">in</span> r10m_bands.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;10m---区域代码&#x27;</span>,key)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;10m---组合波段&#x27;</span>,bands)</span><br><span class="line">            <span class="comment"># 输出命名</span></span><br><span class="line">            out_bandpath = out_path+<span class="string">&#x27;/&#x27;</span>+date+<span class="string">&#x27;/R10m/&#x27;</span>+key+<span class="string">&#x27;.tif&#x27;</span></span><br><span class="line">            <span class="comment"># 第一个band用来定义坐标系</span></span><br><span class="line">            ds = gdal.Open(r10m_dir+<span class="string">&#x27;/&#x27;</span>+bands[<span class="number">0</span>])</span><br><span class="line">            ds_width = ds.RasterXSize</span><br><span class="line">            ds_height = ds.RasterYSize</span><br><span class="line">            ds_geo = ds.GetGeoTransform()</span><br><span class="line">            ds_prj = ds.GetProjection()</span><br><span class="line">            driver = gdal.GetDriverByName(<span class="string">&#x27;GTiff&#x27;</span>)</span><br><span class="line">            ds_result = driver.Create(out_bandpath, ds_width, ds_height, bands=<span class="built_in">len</span>(bands), eType=gdal.GDT_UInt16)</span><br><span class="line">            ds_result.SetGeoTransform(ds_geo)  <span class="comment"># 导入仿射地理变换参数</span></span><br><span class="line">            ds_result.SetProjection(ds_prj)  <span class="comment"># 导入投影信息</span></span><br><span class="line">            <span class="keyword">del</span> ds</span><br><span class="line">            i = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> band <span class="keyword">in</span> bands:</span><br><span class="line">                band_img = gdal.Open(r10m_dir+<span class="string">&#x27;/&#x27;</span>+band)</span><br><span class="line">                band_data = band_img.GetRasterBand(<span class="number">1</span>).ReadAsArray(<span class="number">0</span>, <span class="number">0</span>, ds_width, ds_height)</span><br><span class="line">                ds_result.GetRasterBand(i).WriteArray(band_data)</span><br><span class="line">                i = i+<span class="number">1</span></span><br><span class="line">            <span class="keyword">del</span> ds_result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key,bands <span class="keyword">in</span> r20m_bands.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;20m---区域代码&#x27;</span>,key)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;20m---组合波段&#x27;</span>,bands)</span><br><span class="line">            <span class="comment"># 输出命名</span></span><br><span class="line">            out_bandpath = out_path+<span class="string">&#x27;/&#x27;</span>+date+<span class="string">&#x27;/R20m/&#x27;</span>+key+<span class="string">&#x27;.tif&#x27;</span></span><br><span class="line">            <span class="comment"># 第一个band用来定义坐标系</span></span><br><span class="line">            ds = gdal.Open(r20m_dir+<span class="string">&#x27;/&#x27;</span>+bands[<span class="number">0</span>])</span><br><span class="line">            ds_width = ds.RasterXSize</span><br><span class="line">            ds_height = ds.RasterYSize</span><br><span class="line">            ds_geo = ds.GetGeoTransform()</span><br><span class="line">            ds_prj = ds.GetProjection()</span><br><span class="line">            driver = gdal.GetDriverByName(<span class="string">&#x27;GTiff&#x27;</span>)</span><br><span class="line">            ds_result = driver.Create(out_bandpath, ds_width, ds_height, bands=<span class="built_in">len</span>(bands), eType=gdal.GDT_UInt16)</span><br><span class="line">            ds_result.SetGeoTransform(ds_geo)  <span class="comment"># 导入仿射地理变换参数</span></span><br><span class="line">            ds_result.SetProjection(ds_prj)  <span class="comment"># 导入投影信息</span></span><br><span class="line">            <span class="keyword">del</span> ds</span><br><span class="line">            i = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> band <span class="keyword">in</span> bands:</span><br><span class="line">                band_img = gdal.Open(r20m_dir+<span class="string">&#x27;/&#x27;</span>+band)</span><br><span class="line">                band_data = band_img.GetRasterBand(<span class="number">1</span>).ReadAsArray(<span class="number">0</span>, <span class="number">0</span>, ds_width, ds_height)</span><br><span class="line">                ds_result.GetRasterBand(i).WriteArray(band_data)</span><br><span class="line">                i = i+<span class="number">1</span></span><br><span class="line">            <span class="keyword">del</span> ds_result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> key,bands <span class="keyword">in</span> r60m_bands.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;60m---区域代码&#x27;</span>,key)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;60m---组合波段&#x27;</span>,bands)</span><br><span class="line">            <span class="comment"># 输出命名</span></span><br><span class="line">            out_bandpath = out_path+<span class="string">&#x27;/&#x27;</span>+date+<span class="string">&#x27;/R60m/&#x27;</span>+key+<span class="string">&#x27;.tif&#x27;</span></span><br><span class="line">            <span class="comment"># 第一个band用来定义坐标系</span></span><br><span class="line">            ds = gdal.Open(r60m_dir+<span class="string">&#x27;/&#x27;</span>+bands[<span class="number">0</span>])</span><br><span class="line">            ds_width = ds.RasterXSize</span><br><span class="line">            ds_height = ds.RasterYSize</span><br><span class="line">            ds_geo = ds.GetGeoTransform()</span><br><span class="line">            ds_prj = ds.GetProjection()</span><br><span class="line">            driver = gdal.GetDriverByName(<span class="string">&#x27;GTiff&#x27;</span>)</span><br><span class="line">            ds_result = driver.Create(out_bandpath, ds_width, ds_height, bands=<span class="built_in">len</span>(bands), eType=gdal.GDT_UInt16)</span><br><span class="line">            ds_result.SetGeoTransform(ds_geo)  <span class="comment"># 导入仿射地理变换参数</span></span><br><span class="line">            ds_result.SetProjection(ds_prj)  <span class="comment"># 导入投影信息</span></span><br><span class="line">            <span class="keyword">del</span> ds</span><br><span class="line">            i = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> band <span class="keyword">in</span> bands:</span><br><span class="line">                band_img = gdal.Open(r60m_dir+<span class="string">&#x27;/&#x27;</span>+band)</span><br><span class="line">                band_data = band_img.GetRasterBand(<span class="number">1</span>).ReadAsArray(<span class="number">0</span>, <span class="number">0</span>, ds_width, ds_height)</span><br><span class="line">                ds_result.GetRasterBand(i).WriteArray(band_data)</span><br><span class="line">                i = i+<span class="number">1</span></span><br><span class="line">            <span class="keyword">del</span> ds_result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    input_path = <span class="string">&#x27;F:/PoyangLake/poyanghu_data/test/tif&#x27;</span></span><br><span class="line">    out_path = <span class="string">&#x27;F:/PoyangLake/poyanghu_data/test/bandcombination&#x27;</span></span><br><span class="line">    bandcombination(input_path, out_path)</span><br></pre></td></tr></table></figure><h1 id="批量拼接-裁剪，按日期、分辨率存放"><a href="#批量拼接-裁剪，按日期、分辨率存放" class="headerlink" title="批量拼接&#x2F;裁剪，按日期、分辨率存放"></a>批量拼接&#x2F;裁剪，按日期、分辨率存放</h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python+IDM批量下载Sentinel</title>
      <link href="/2023/09/05/python-IDM%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDSentinel/"/>
      <url>/2023/09/05/python-IDM%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDSentinel/</url>
      
        <content type="html"><![CDATA[<p> <strong>前言</strong></p><blockquote><p>下载Sentinel数据需要到欧空局的专门网站，划定区域、设置日期等等参数，然行进行检索。检索完成后选择需要下载的影像进行下载。如果需要下载大量影像数据，尤其是长时间序列的数据，这种方式比较麻烦。</p><p>欧空局发布了sentinelsat的pyhton包，可以进行调用。</p><p>IDM也有对应的包，可以进行调用。</p><p>那么使用这个两个包基本可以实现快速、自动化、批量下载。</p></blockquote><h1 id="sentinelsat—Sentinel的Python-API"><a href="#sentinelsat—Sentinel的Python-API" class="headerlink" title="sentinelsat—Sentinel的Python API"></a>sentinelsat—Sentinel的Python API</h1><p>这里是说明文档。</p><p><a href="https://sentinelsat.readthedocs.io/en/latest/api_overview.html">Python API — Sentinelsat 1.2.1 documentation</a></p><p>我们主要使用<code>query</code>函数，进行所需要数据的检索。</p><p>先将索引到的结果写出为excel表格。url即下载地址。拖到IDM中即可下载。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Search_data</span>(<span class="params">login, key, path_geojson, start_date, end_date, name, product_type, cloud, filepath</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param login: 欧空局账号，字符串类型</span></span><br><span class="line"><span class="string">    :param key: 欧空局密码，字符串类型</span></span><br><span class="line"><span class="string">    :param path_geojson: 兴趣区路径及文件名</span></span><br><span class="line"><span class="string">    :param start_date: 开始时间，字符串</span></span><br><span class="line"><span class="string">    :param end_date: 结束时间，字符串</span></span><br><span class="line"><span class="string">    :param name: 卫星名称</span></span><br><span class="line"><span class="string">    :param product_type: 卫星类型</span></span><br><span class="line"><span class="string">    :param cloud: 云量筛选，格式：（0，15）</span></span><br><span class="line"><span class="string">    :param filepath: Url保存路径及文件名</span></span><br><span class="line"><span class="string">    :return: 返回存有下载链接的excel路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    api = SentinelAPI(login, key, <span class="string">&#x27;https://scihub.copernicus.eu/dhus&#x27;</span>)</span><br><span class="line">    <span class="comment"># 登陆账号https://scihub.copernicus.eu/apihub/</span></span><br><span class="line">    footprint = geojson_to_wkt(read_geojson(path_geojson))</span><br><span class="line">    <span class="comment"># 读取兴趣区，兴趣区由http://geojson.io导出</span></span><br><span class="line">    products = api.query(footprint,</span><br><span class="line">                         date=(start_date, end_date),  <span class="comment"># 搜索的日期范围</span></span><br><span class="line">                         platformname=name,  <span class="comment"># 卫星平台名，Sentinel-2</span></span><br><span class="line">                         producttype=product_type,  <span class="comment"># 产品数据等级，Sentinel-2： S2MSI2A，S2MSI1C，S2MS2Ap/Sentinel-1：SLC，GRD，OCN</span></span><br><span class="line">                         cloudcoverpercentage=cloud)  <span class="comment"># 云量百分比</span></span><br><span class="line">    <span class="comment"># 搜索A、B双星的数据</span></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    workbook_write = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    worksheet_write = workbook_write.add_sheet(<span class="string">&#x27;Url_image&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> product <span class="keyword">in</span> products:</span><br><span class="line">        <span class="comment"># 通过for循环遍历并打印、下载出搜索到的产品文件名</span></span><br><span class="line">        info_product = api.get_product_odata(product)</span><br><span class="line">        <span class="comment"># 通过OData API获取单一产品数据的主要元数据信息</span></span><br><span class="line">        worksheet_write.write(row, <span class="number">0</span>, info_product[<span class="string">&#x27;url&#x27;</span>])</span><br><span class="line">        worksheet_write.write(row, <span class="number">1</span>, info_product[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        <span class="built_in">print</span>(info_product[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        <span class="comment"># print(product_info[&#x27;url&#x27;])</span></span><br><span class="line">        <span class="comment"># 打印下载的产品数据文件名，id/uuid代码编号，size数据大小，title标题，url链接，md5，date时间</span></span><br><span class="line">        <span class="comment"># api.download(product)</span></span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">    workbook_write.save(filepath)</span><br><span class="line">    <span class="keyword">return</span> filepath, api</span><br><span class="line">    <span class="comment"># 循环结束后，保存表格</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="subprocess—IDM的Python-api"><a href="#subprocess—IDM的Python-api" class="headerlink" title="subprocess—IDM的Python api"></a>subprocess—IDM的Python api</h1><p>官方说明文档</p><p><a href="https://www.internetdownloadmanager.com/support/command_line.html">https://www.internetdownloadmanager.com/support/command_line.html</a></p><p>简单总结下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">使用：</span><br><span class="line">idman /s</span><br><span class="line">或</span><br><span class="line">idman /d URL [/p local_path] [/f local_file_name] [/q] [/h][/n] [/a]</span><br><span class="line">可以进行下载</span><br><span class="line">参数解释：</span><br><span class="line">/d URL  <span class="comment">#根据URL下载文件</span></span><br><span class="line">/s      <span class="comment">#开始下载队列中的任务</span></span><br><span class="line">/p      <span class="comment">#定义文件要存储在本地的地址</span></span><br><span class="line">/f      <span class="comment">#定义文件存储在本地的文件名</span></span><br><span class="line">/q      <span class="comment">#下载成功后IDM将退出。</span></span><br><span class="line">/h      <span class="comment">#下载成功后IDM将挂起你的链接</span></span><br><span class="line">/n      <span class="comment">#当IDM不出问题时启动静默模式</span></span><br><span class="line">/a      <span class="comment">#添加指定文件到/d的下载队列，但是不进行下载</span></span><br></pre></td></tr></table></figure><p>演示下步骤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> call </span><br><span class="line"></span><br><span class="line"><span class="comment"># IDM安装路径下面的exe文件</span></span><br><span class="line">IDM = <span class="string">r&quot;D:\IDM\Internet Download Manager\IDMan.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载路径</span></span><br><span class="line">DownPath = <span class="string">&#x27;D:/下载/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件名称</span></span><br><span class="line">local_file_name = <span class="string">&#x27;xx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件链接（注意是这个列表）</span></span><br><span class="line">urlList = [<span class="string">&#x27;xxx&#x27;</span>]</span><br><span class="line"><span class="comment"># 将下载链接全部加入到下载列表，之后再进行下载。</span></span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> urlList:</span><br><span class="line">    call([IDM, <span class="string">&#x27;/d&#x27;</span>, ul, <span class="string">&#x27;/p&#x27;</span>, DownPath, <span class="string">&#x27;/f&#x27;</span>, local_file_name, <span class="string">&#x27;/n&#x27;</span>, <span class="string">&#x27;/a&#x27;</span>])</span><br><span class="line">call([IDM, <span class="string">&#x27;/s&#x27;</span>])</span><br></pre></td></tr></table></figure><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><ol><li>根据需求检索数据，导出下载链接</li><li>调用IDM批量下载</li></ol><p><strong>全部代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time ： 2023/3/31 15:35</span></span><br><span class="line"><span class="string">@Auth ： RS迷途小书童</span></span><br><span class="line"><span class="string">@File ：Batch download of Sentinel data.py</span></span><br><span class="line"><span class="string">@IDE ：PyCharm</span></span><br><span class="line"><span class="string">@Purpose ：批量下载哨兵数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> sentinelsat <span class="keyword">import</span> SentinelAPI, read_geojson, geojson_to_wkt</span><br><span class="line"><span class="comment"># 导入用户登录，兴趣区识别模块</span></span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> call</span><br><span class="line"><span class="comment"># 用来唤醒IDM下载数据</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">import</span> xlrd2</span><br><span class="line"><span class="comment"># excel的读取和写入模块</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Search_data</span>(<span class="params">login, key, path_geojson, start_date, end_date, name, product_type, cloud, filepath</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param login: 欧空局账号，字符串类型</span></span><br><span class="line"><span class="string">    :param key: 欧空局密码，字符串类型</span></span><br><span class="line"><span class="string">    :param path_geojson: 兴趣区路径及文件名</span></span><br><span class="line"><span class="string">    :param start_date: 开始时间，字符串</span></span><br><span class="line"><span class="string">    :param end_date: 结束时间，字符串</span></span><br><span class="line"><span class="string">    :param name: 卫星名称</span></span><br><span class="line"><span class="string">    :param product_type: 卫星类型</span></span><br><span class="line"><span class="string">    :param cloud: 云量筛选，格式：（0，15）</span></span><br><span class="line"><span class="string">    :param filepath: Url保存路径及文件名</span></span><br><span class="line"><span class="string">    :return: 返回存有下载链接的excel路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    api = SentinelAPI(login, key, <span class="string">&#x27;https://scihub.copernicus.eu/dhus&#x27;</span>)</span><br><span class="line">    <span class="comment"># 登陆账号https://scihub.copernicus.eu/apihub/</span></span><br><span class="line">    footprint = geojson_to_wkt(read_geojson(path_geojson))</span><br><span class="line">    <span class="comment"># 读取兴趣区，兴趣区由http://geojson.io导出</span></span><br><span class="line">    products = api.query(footprint,</span><br><span class="line">                         date=(start_date, end_date),  <span class="comment"># 搜索的日期范围</span></span><br><span class="line">                         platformname=name,   <span class="comment"># 卫星平台名，Sentinel-2</span></span><br><span class="line">                         producttype=product_type,  <span class="comment"># 产品数据等级，Sentinel-2： S2MSI2A，S2MSI1C，S2MS2Ap/Sentinel-1：SLC，GRD，OCN</span></span><br><span class="line">                         cloudcoverpercentage=cloud)  <span class="comment"># 云量百分比</span></span><br><span class="line">    <span class="comment"># 搜索A、B双星的数据</span></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    workbook_write = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    worksheet_write = workbook_write.add_sheet(<span class="string">&#x27;Url_image&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> product <span class="keyword">in</span> products:</span><br><span class="line">        <span class="comment"># 通过for循环遍历并打印、下载出搜索到的产品文件名</span></span><br><span class="line">        info_product = api.get_product_odata(product)</span><br><span class="line">        <span class="comment"># 通过OData API获取单一产品数据的主要元数据信息</span></span><br><span class="line">        worksheet_write.write(row, <span class="number">0</span>, info_product[<span class="string">&#x27;url&#x27;</span>])</span><br><span class="line">        worksheet_write.write(row, <span class="number">1</span>, info_product[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        <span class="built_in">print</span>(info_product[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">        <span class="comment"># print(product_info[&#x27;url&#x27;])</span></span><br><span class="line">        <span class="comment"># 打印下载的产品数据文件名，id/uuid代码编号，size数据大小，title标题，url链接，md5，date时间</span></span><br><span class="line">        <span class="comment"># api.download(product)</span></span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">    workbook_write.save(filepath)</span><br><span class="line">    <span class="keyword">return</span> filepath, api</span><br><span class="line">    <span class="comment"># 循环结束后，保存表格</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Download_image</span>(<span class="params">filepath, Path_Download, Path_IDM, api</span>):</span><br><span class="line">    workbook_read = xlrd2.open_workbook(filepath)</span><br><span class="line">    <span class="comment"># 打开表格，创建工作空间</span></span><br><span class="line">    sheet1 = workbook_read.sheet_by_name(<span class="string">&#x27;Url_image&#x27;</span>)</span><br><span class="line">    <span class="comment"># 选择需要读取的sheet</span></span><br><span class="line">    link_list = sheet1.col_values(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 获取第一列的数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;所有链接下载完成，现在开始下载对应数据&#x27;</span>)</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> link_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---------------------------------------------------&#x27;</span>)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span> + <span class="built_in">str</span>(num) + <span class="string">&#x27;次循环&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">id</span> = link_list[<span class="number">0</span>].split(<span class="string">&#x27;\&#x27;&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        link = link_list[<span class="number">0</span>]</span><br><span class="line">        info_product = api.get_product_odata(<span class="built_in">id</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;查询当前列表里的第一个数据的状态&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> info_product[<span class="string">&#x27;Online&#x27;</span>]:</span><br><span class="line">            <span class="built_in">print</span>(info_product[<span class="string">&#x27;title&#x27;</span>] + <span class="string">&#x27;为：online产品&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;加入IDM的下载列表中: &#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            call([Path_IDM, <span class="string">&#x27;/d&#x27;</span>, link, <span class="string">&#x27;/p&#x27;</span>, Path_Download, <span class="string">&#x27;/n&#x27;</span>, <span class="string">&#x27;/a&#x27;</span>])</span><br><span class="line">            link_list.remove(link)</span><br><span class="line">            call([Path_IDM, <span class="string">&#x27;/s&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(info_product[<span class="string">&#x27;title&#x27;</span>] + <span class="string">&#x27;为：offline产品&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;激活offline产品&#x27;</span>)</span><br><span class="line">            code_id = link_list[<span class="number">0</span>].split(<span class="string">&#x27;\&#x27;&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            api.trigger_offline_retrieval(code_id)</span><br><span class="line">            <span class="comment"># 激活offline产品</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;检查任务列表里是否存在online产品: .........&#x27;</span>)</span><br><span class="line">            <span class="comment"># 等待激活成功的时候，检查现在的列表里还有没有online产品</span></span><br><span class="line">            <span class="comment"># 如果有online的产品那就下载</span></span><br><span class="line">            <span class="comment"># 首先检查列表中是否需要下载的数据</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(link_list) &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># 记录列表里可以下载的链接，并在最后把它们删除</span></span><br><span class="line">                link_list_1 = []</span><br><span class="line">                <span class="comment"># 开始寻找列表剩下的元素是否有online产品</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(link_list)):</span><br><span class="line">                    id2 = link_list[i].split(<span class="string">&#x27;\&#x27;&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">                    link_1 = link_list[i]</span><br><span class="line">                    info_product2 = api.get_product_odata(id2)</span><br><span class="line">                    <span class="keyword">if</span> info_product2[<span class="string">&#x27;Online&#x27;</span>]:</span><br><span class="line">                        <span class="built_in">print</span>(info_product2[<span class="string">&#x27;title&#x27;</span>] + <span class="string">&#x27;为Online产品&#x27;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;加入IDM的下载列表中: &#x27;</span>)</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;--------------------------------------------&#x27;</span>)</span><br><span class="line">                        call([Path_IDM, <span class="string">&#x27;/d&#x27;</span>, link_1, <span class="string">&#x27;/p&#x27;</span>, Path_Download, <span class="string">&#x27;/n&#x27;</span>, <span class="string">&#x27;/a&#x27;</span>])</span><br><span class="line">                        <span class="comment"># 在列表中加入需要删除产品的HTTP链接信息</span></span><br><span class="line">                        <span class="comment"># 直接在link_list中删除会link_list的长度会发生改变，最终造成i的值超过link_list的长度</span></span><br><span class="line">                        link_list_1.append(link_1)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 把已经下载的数据的链接给删除掉</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(link_list_1) &gt; <span class="number">0</span>:</span><br><span class="line">                    call([Path_IDM, <span class="string">&#x27;/s&#x27;</span>])</span><br><span class="line">                    <span class="keyword">for</span> link_2 <span class="keyword">in</span> link_list_1:</span><br><span class="line">                        link_list.remove(link_2)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;本轮次检查结束，开始等到40分钟&#x27;</span>)</span><br><span class="line">            <span class="comment"># 将该激活的产品删除，再加入到最后</span></span><br><span class="line">            link_list.remove(link)</span><br><span class="line">            link_list.append(link)</span><br><span class="line">            <span class="comment"># 两次激活offline数据的间隔要大于30分钟</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="built_in">int</span>(<span class="number">1200</span>)), ncols=<span class="number">100</span>):</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;说明文档：https://sentinelsat.readthedocs.io/en/latest/api_overview.html,</span></span><br><span class="line"><span class="string">    https://scihub.copernicus.eu/userguide/AdvancedSearch&quot;&quot;&quot;</span></span><br><span class="line">    login = <span class="string">&#x27;**********&#x27;</span></span><br><span class="line">    key = <span class="string">&#x27;********&#x27;</span></span><br><span class="line">    path_geojson = <span class="string">&quot;G:/map.geojson&quot;</span></span><br><span class="line">    start_date = <span class="string">&quot;20230101&quot;</span></span><br><span class="line">    end_date = <span class="string">&quot;20230301&quot;</span></span><br><span class="line">    name = <span class="string">&#x27;Sentinel-2&#x27;</span></span><br><span class="line">    product_type = <span class="string">&#x27;S2MSI2A&#x27;</span></span><br><span class="line">    cloud = (<span class="number">0</span>, <span class="number">15</span>)</span><br><span class="line">    filepath = <span class="string">&#x27;G:/url.xls&#x27;</span></span><br><span class="line">    <span class="comment"># 存储下载链接的表格</span></span><br><span class="line">    filepath, api = Search_data(login, key, path_geojson, start_date, end_date, name, product_type, cloud, filepath)</span><br><span class="line">    Download_Path = <span class="string">&#x27;G:/try_download/&#x27;</span></span><br><span class="line">    <span class="comment"># 数据要下载的地址,IDM的下载地址</span></span><br><span class="line">    Path_IDM = <span class="string">&quot;D:/IDM/IDMan.exe&quot;</span></span><br><span class="line">    Download_image(filepath, Download_Path, Path_IDM, api)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>执行到这一段代码<code>call([Path_IDM, &#39;/d&#39;, link, &#39;/p&#39;, Path_Download, &#39;/n&#39;, &#39;/a&#39;])</code>，有时候IDM会提示:<strong>保存的文件名称是$value…</strong>,需要确认才能继续下载。因而代码执行到这一步就会卡在这里，目前没有找到解决方式。</p><p><img src="/2023/09/05/python-IDM%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDSentinel/1.png" alt="1.png"></p><p>既然已经导出需要下载的excel文档了，整理下下载的url地址，直接批量添加到IDM里面下载即可。😁👻</p><p>url下载地址</p><p><img src="/2023/09/05/python-IDM%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDSentinel/2.png" alt="2.png"></p><p>导入IDM</p><p><img src="/2023/09/05/python-IDM%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDSentinel/3.png" alt="3.png"></p><p>还没有识别，显示<code>$value</code></p><p><img src="/2023/09/05/python-IDM%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDSentinel/4.png" alt="4.png"></p><p>识别成功</p><p><img src="/2023/09/05/python-IDM%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BDSentinel/5.png" alt="5.png"></p><p>参考文章</p><p><a href="https://blog.csdn.net/m0_56729804/article/details/131209082">【Python&amp;RS】基于Python批量下载哨兵二号数据_哨兵数据下载_RS迷途小书童的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Sentinel </tag>
            
            <tag> IDM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本科期间的论文成果！</title>
      <link href="/2023/09/03/%E6%9C%AC%E7%A7%91%E6%9C%9F%E9%97%B4%E7%9A%84%E8%AE%BA%E6%96%87%E6%88%90%E6%9E%9C%EF%BC%81/"/>
      <url>/2023/09/03/%E6%9C%AC%E7%A7%91%E6%9C%9F%E9%97%B4%E7%9A%84%E8%AE%BA%E6%96%87%E6%88%90%E6%9E%9C%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一入<code>遥感</code>深似海！一切的起源都是机缘巧合跟吴老师做大创，于是本科期间的主要学习、工作都围绕遥感展开。但也取得了一些小小的成果。</p></blockquote><p><img src="/2023/09/03/%E6%9C%AC%E7%A7%91%E6%9C%9F%E9%97%B4%E7%9A%84%E8%AE%BA%E6%96%87%E6%88%90%E6%9E%9C%EF%BC%81/paper1.png" alt="paper1"></p><blockquote><p>第一篇是基于大创项目写的论文，发表在《地理空间信息》（科技核心）。这个项目是我的科研启蒙项目。从方向拟定、方案设计、问题攻关、工作安排、论文撰写、投稿、修稿最后到发表一整套流程，几乎完完全全是我自己做的。我感受非常深！要不是吴老师的那一顿批评（给吴老师气坏了），我可能做不好这个项目。第一次投稿，自己找期刊投，和编辑沟通，学习汇款等等等……我都独立完成了！吴老师最后也给与了我肯定，并在升学过程中给与了我帮助！（阴差阳错吧，虽然最后没有帮上）</p><p>我深深记得，word里面如何设置标题是吴老师亲手教我的，一个大教授，教我word，真的很感动！</p></blockquote><p><img src="/2023/09/03/%E6%9C%AC%E7%A7%91%E6%9C%9F%E9%97%B4%E7%9A%84%E8%AE%BA%E6%96%87%E6%88%90%E6%9E%9C%EF%BC%81/paper2.png" alt="paper2"></p><blockquote><p>那时写的自己的研究方向：遥感信息智能化提取哈哈哈哈哈。下载下来的论文经纬度格式有问题，可能是编辑搞错了，我确认论文的时候是正确的格式。逃不掉的遥感啊</p></blockquote><blockquote><p> 第二篇是二作，基于第二个吴老师带的毕业论文成果，因为是邀稿，所以很快就接受发表了。</p></blockquote><p><img src="/2023/09/03/%E6%9C%AC%E7%A7%91%E6%9C%9F%E9%97%B4%E7%9A%84%E8%AE%BA%E6%96%87%E6%88%90%E6%9E%9C%EF%BC%81/paper4.png" alt="paper4"></p><blockquote><p>我的毕业论文项目，投了TGRS，现在在返修，两个师妹接手了我的工作。还有很多问题，希望她们加油！争取早日被接受，再为安大资环学院做一份贡献！</p><p>我爱安大！其实遥感还是蛮有意思的。希望我国空天信息行业蓬勃发展！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN+Github搭建图床</title>
      <link href="/2023/09/03/CDN-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/09/03/CDN-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前期搭建博客的时候，老是遇到图片无法加载、加载出错等等问题，很是烦恼。于是想搭建一个图床，进行个人博客图片的存储、显示使用。</p></blockquote><blockquote><p>​利用GitHub+jsDelivr+PicGo搭建免费图床，CDN图床就是这么朴实无华，是基于免费CDN与免费开源网站制作的免费CDN图床。</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>用 markdown 写博客，想插入一些图片，如果采用本地存储方式，上传博客时插入的图片路径就找不到了，需要手动再把图片上传上去，并且修改路径，很麻烦，可以考虑将图片上传至图床生成 URL，直接在markdown 引入url。 </li><li>现在国内用的各种图床,例如,微博图床、SM.MS、Imgur、七牛云、又拍云、腾讯云COS、阿里云OSS等都有各种限制，或者需要收费。</li><li>使用GitHub仓库创建一个图床，存在的问题是国内访问github的速度不是很快，可以利用jsDelivr CDN加速访问（jsDelivr 是一个免费开源的 CDN 解决方案）国内该平台是首个「打通中国大陆与海外的免费CDN服务」，网页开发者无须担心中国防火墙问题而影响使用。</li></ul><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><ol><li>新建github仓库 </li><li>生成一个token密钥 </li><li>下载PicGo、配置</li></ol><h2 id="1、新建一个github仓库"><a href="#1、新建一个github仓库" class="headerlink" title="1、新建一个github仓库"></a>1、新建一个github仓库</h2><p>注意设置为公开即可，其他无需注意</p><h2 id="2、生成token密钥"><a href="#2、生成token密钥" class="headerlink" title="2、生成token密钥"></a>2、生成token密钥</h2><p><strong>settings-&gt;developer settings-&gt;personal access tokens-&gt;Token</strong></p><p><img src="/2023/09/03/CDN-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/settings.png" alt="settings"></p><p><img src="/2023/09/03/CDN-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/developersetting.png" alt="developersetting"></p><p><img src="/2023/09/03/CDN-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/token.png" alt="token"></p><p><img src="/2023/09/03/CDN-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/token2.png" alt="token2"></p><h2 id="3、下载PicGo、配置"><a href="#3、下载PicGo、配置" class="headerlink" title="3、下载PicGo、配置"></a>3、下载PicGo、配置</h2><p><a href="https://github.com/Molunerfinn/PicGo">下载地址</a></p><p><a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><p><img src="/2023/09/03/CDN-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/picgo1.png" alt="picgo1"></p><ul><li>仓库名：前面新建的仓库，格式：<code>&lt;用户名&gt;/&lt;仓库名&gt;</code></li><li>分支名：填写主分支<code>main</code>即可</li><li>Token：前面生成的token密钥</li><li>存储路径：按你自己的需求填写</li><li>自定义域名：图片上传后，PicGo 会按照 <code>自定义域名+上传的图片名</code> 的方式生成访问链接，此处我们填写<code>jsDelivr</code>的CDN加速地址，格式：<code>https://cdn.jsdelivr.net/gh/&lt;用户名&gt;/&lt;仓库名&gt;</code></li></ul><blockquote><p>到这里就搭建完成了，输入url地址即可访问。</p></blockquote><p><img src="/2023/09/03/CDN-Github%E6%90%AD%E5%BB%BA%E5%9B%BE%E5%BA%8A/picogo2.png" alt="picogo2"></p><p> 原文链接</p><p><a href="https://www.rstk.cn/news/1756448.html?action=onClick">10分钟教你使用Picgo+GitHub+ jsDelivr搭建CDN加速免费图床 (rstk.cn)</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客搭建 </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录第一次闲鱼卖货</title>
      <link href="/2023/09/02/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%97%B2%E9%B1%BC%E5%8D%96%E8%B4%A7/"/>
      <url>/2023/09/02/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%97%B2%E9%B1%BC%E5%8D%96%E8%B4%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​之前清理店面物品的时候，就想着用闲鱼把能变现的都变现，尽量减少亏损。在闲鱼上联系了收硒鼓、耗材的商家，最终都没有卖掉。</p><p>​这几天放假，收拾东西时发现了本科时候买的华为的M-pencil，也用了一段时间，买的时候499。也用了一段时间现在是完全闲置了，平板在给弟弟用，笔根本用不到。于是寻思给卖了。</p><p>​闲鱼直接售价两百开卖。</p></blockquote><p><img src="/2023/09/02/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%97%B2%E9%B1%BC%E5%8D%96%E8%B4%A7/1.jpg" alt="1"></p><blockquote><p>​    刚发布，就有人下单，但不付款。看了该用户的评价，感觉是个坑，于是立马取消了。接着又有人出家120、170，真的太低了，果断拒绝。耐心等待买家。</p></blockquote><p><img src="/2023/09/02/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%97%B2%E9%B1%BC%E5%8D%96%E8%B4%A7/2.jpg" alt="2"></p><blockquote><p>​最后有个买家简单询问M-pencil基本情况后直接付款。我还是不放心，于是上网上查了闲鱼上有哪些坑。在发货前拍了很多视频证明笔的功能是完好的，和我描述的一样，拍照记下所将要寄的所有东西。第二天直接发货，运费寄付18.</p><p>​今天买家确定收货，200元到账哈哈哈哈。快递一直在派送，我还以为买家要坑我运费呢。愉快的一次交易！记录一下。</p></blockquote><p><img src="/2023/09/02/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%97%B2%E9%B1%BC%E5%8D%96%E8%B4%A7/3.jpg" alt="3"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究生生活 </tag>
            
            <tag> 闲置用品 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔0827</title>
      <link href="/2023/08/27/%E9%9A%8F%E7%AC%940827/"/>
      <url>/2023/08/27/%E9%9A%8F%E7%AC%940827/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>心随天地走，意被牛羊牵</strong><br>​<strong>大漠的孤烟，拥抱落日圆</strong></p></blockquote><hr><p>坐在回家的大巴车上，我刷着抖音。<br><strong>心随天地走，意被牛羊牵</strong>。一位id叫做：浩然🎹的博主，他的歌声直击我的灵魂，悦耳悠长，瞬间带动了我的情绪。原来这首歌是《敕勒歌》，我之前没有听过。<br>我不知道这首歌到底表达的是什么，又是什么背景，我只听到了浩然翻唱的片段。我该怎么表达我那时的心情呢？是思念吗？是释然吗？彷佛是一个经历了许多人故事的人在和我含蓄地倾诉，如此陌生的一个人，却又引起了我的共鸣，我又经历了什么呢？<br>浩然是一位视障音乐爱好者，我立刻关注了他。他的声音真的很打动我，我不知道为什么。<br>我真的很容易产生共情，经常幻想自己是各种各样的人，但都是经历人生苦难、意难平的人啊！泪水啊也会轻易地掉。<br>《乌兰巴托的夜》也非常好听！</p><blockquote><p><strong>​穿过旷野的风 你慢些走</strong><br><strong>​我用沉默告诉你 我醉了酒</strong><br><strong>​乌兰巴托的夜 那么静 那么静</strong><br><strong>​连风都听不到  听不到</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/gisxiaohan/album/img/wlbtnight.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 随想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录生活---0826南京</title>
      <link href="/2023/08/26/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB0826/"/>
      <url>/2023/08/26/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB0826/</url>
      
        <content type="html"><![CDATA[<blockquote><p>8月26日，和倩倩南京会面！</p><p>一个月没见甚是想念啊</p><p>晚上一起在南京转了转。</p></blockquote><blockquote><p>德基广场！豪华！充满金钱的味道。和对象一起去了檀健次线下代言的店。</p></blockquote><p><img src="/2023/08/26/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB0826/IMG_20230825_190207.jpg" alt="IMG_20230825_190207"></p><blockquote><p>夫子庙景色很美，鸭血粉丝汤好吃！</p></blockquote><p><img src="/2023/08/26/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB0826/IMG_20230825_202946.jpg" alt="IMG_20230825_202946"></p><p><img src="/2023/08/26/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB0826/IMG_20230825_201725.jpg" alt="IMG_20230825_201725"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 恋爱 </tag>
            
            <tag> 研究生生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu学习</title>
      <link href="/2023/08/24/Ubuntu%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/24/Ubuntu%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-Server学习"><a href="#Ubuntu-Server学习" class="headerlink" title="Ubuntu Server学习"></a>Ubuntu Server学习</h1><p>** Xshell **</p><ul><li><p>复制：Ctrl+Insert *</p></li><li><p>粘贴：Shift+Insert *</p></li></ul><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>**远程登录  **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*command 参数1 参数2*</span><br><span class="line"># 查询ip地址,用Xshell连接</span><br><span class="line">ip addr</span><br><span class="line"># 查看当前目录</span><br><span class="line">pwd</span><br><span class="line"># 注销，退出</span><br><span class="line">exit or Ctrl+d</span><br><span class="line"># 关机</span><br><span class="line">power off本机上操作</span><br><span class="line">rebot 重启</span><br></pre></td></tr></table></figure><p><strong>使用root用户登录</strong><br>root用户是超级管理员，权限很大。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">执行命令 sudo passwd root</span><br><span class="line">修改密码后 </span><br><span class="line">执行命令 su - root 切换到root账号</span><br></pre></td></tr></table></figure><h2 id="文本编辑vi"><a href="#文本编辑vi" class="headerlink" title="文本编辑vi"></a>文本编辑vi</h2><p>vi的三种模式</p><ul><li>命令模式<ul><li>h — 光标左移一个字符</li><li>j — 光标下移一个字符</li><li>k — 光标上移一个字符</li><li>l — 光标右移一个字符（插入模式上下左右键）</li><li>gg — 回到开始行</li><li>G —移动到文件末尾</li><li>Ctrl + f 往下翻一页</li><li>Ctrl + b 往上翻一页</li><li>yy 复制光标所在行</li><li>p 粘贴</li></ul></li><li>插入模式  ESC 退回命令模式<ul><li>a —光标所在位置后插入文本 append</li><li>i  —光标所在位置前插入</li><li>o —插入新行</li></ul></li><li>底行模式<br>在屏幕底部打开命令行，主要是 保存、退出<ul><li>：wq 保存文件并退出</li><li>：q不保存，并退出</li><li>：q! 编辑过了，不保存文件，强制退出</li><li>：w只保存文件，不退出vi</li><li>：set nu 显示行号</li><li>&#x2F;abc 查找abc字符</li><li>：1，$s&#x2F;string&#x2F;replace&#x2F;g 替换功能，把文件中的string替换为replace</li></ul></li></ul><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>Linux中，文件是一个非常广泛的概念。<br>Linux中的文件，不仅仅指磁盘上的文本、图片、视频文件，也包括硬件设备。</p><p><strong>分区和文件系统</strong></p><p>在windows上，可以为一块磁盘<em>分区</em>，创建好分区后，还不能直接在分区里存放文件，需要格式化分区。所谓<strong>格式化分区</strong>，即为分区安装<strong>文件系统</strong>。<br>windows上使用的主要是 NTFS。<br>Linux上有 ext2 ext3 ext4等</p><p><strong>文件系统是一种规范，规定了文件存放在磁盘上的方式</strong></p><ul><li>Windows文件系统里面都是磁盘文件或目录</li><li>Windows的文件路径是从盘符开始的</li><li>Windows上的文件的路径是大小写不区分的</li></ul><p><strong>挂接</strong></p><p>但是，Linux系统不同，Linux文件系统里面不都是磁盘文件。</p><p>从Window过来学习Linux的同学要纠正一个思维定式，就是看到路径就一定要和磁盘上的存储的目录或文件对应起来。</p><p>而Linux文件系统目录里面除了磁盘文件，还有很多设备、甚至一些虚拟的对象，也在文件系统目录里面访问。</p><p><img src="/2023/08/24/Ubuntu%E5%AD%A6%E4%B9%A0/Users\12638\AppData\Roaming\Typora\typora-user-images\image-20230708132927260.png" alt="image-20230708132927260"></p><p>随后的启动过程，才会，将不同的分区 <strong>挂接（mount）</strong> 到文件系统不同的目录中。</p><p>上图就是把一个磁盘分区挂接到 &#x2F;opt 下面。 &#x2F;opt 这个路径在这个动作中被称为挂接点。</p><p>挂接后的文件系统目录如下图所示。</p><p><img src="/2023/08/24/Ubuntu%E5%AD%A6%E4%B9%A0/Users\12638\AppData\Roaming\Typora\typora-user-images\image-20230708133028097.png" alt="image-20230708133028097"></p><p><strong>一个文件的全路径 是 从 根 到 该文件 这条路径上 所有节点名 顺序连接，每个节点之间以 &#x2F; 分开。</strong></p><p><strong>注意：区分大小写</strong></p><h2 id="目录和文件操作"><a href="#目录和文件操作" class="headerlink" title="目录和文件操作"></a>目录和文件操作</h2><p>当前工作目录 &#x2F;home&#x2F;用户名</p><p>绝对路径 &#x2F;相对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">cd .  当前路径</span><br><span class="line">cd .. 父级路径</span><br><span class="line">cd ~ 相当于cd /home/当前用户名</span><br><span class="line">cat 显示文件</span><br><span class="line">mkdir 创建目录</span><br><span class="line">mkdir -p 依次创建多层目录</span><br><span class="line">rm 删除文件</span><br><span class="line">rm -r 删除目录</span><br><span class="line">rm -rf 全部删除，不要确认</span><br><span class="line">rm -f 硬性删除，不需要确认</span><br><span class="line"></span><br><span class="line">通配符</span><br><span class="line">* 匹配任意多个字符</span><br><span class="line">？ 匹配任意1个字符</span><br><span class="line">[abcd]匹配abcd中任意一个字符</span><br><span class="line"></span><br><span class="line">拷贝</span><br><span class="line">cp 源文件 目标文件</span><br><span class="line">cp -r 拷贝目录</span><br><span class="line"></span><br><span class="line">移动/重命名</span><br><span class="line">mv 源文件/目录 目标目录</span><br><span class="line"></span><br><span class="line">搜索关键字</span><br><span class="line">grep -n error 文件 查找文件中有error的行</span><br><span class="line"></span><br><span class="line">du -h # 查看磁盘使用情况</span><br></pre></td></tr></table></figure><h2 id="用户管理和文件权限"><a href="#用户管理和文件权限" class="headerlink" title="用户管理和文件权限"></a>用户管理和文件权限</h2><p>现代操作系统都是一个<strong>多用户</strong>的操作系统。</p><p><strong>添加&#x2F;删除用户</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adduser # 添加用户，自动建立一个同名用户组</span><br><span class="line">adduser --ingroup root hxh #把hxh用户添加到root组里面</span><br><span class="line">deluser hxh # 删除账号hxh</span><br></pre></td></tr></table></figure><p><strong>设置密码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd #修改密码su</span><br></pre></td></tr></table></figure><p><strong>用户切换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - hxh2 # 切换到用户hxh</span><br></pre></td></tr></table></figure><p><strong>用户组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">groups hxh # 查看hxh属于哪个用户组</span><br><span class="line">cat /etc/group # 查看所有组</span><br><span class="line">addgroup hxhs # 添加hxhs组 注意在root权限下</span><br><span class="line">delgroup # 删除组</span><br><span class="line">usermod -g g1 byhy # 将byhy用户添加到g1组中</span><br><span class="line">usermod -G g2,g3 byhy # 将byhy用户设置到g2 g3组中</span><br><span class="line">usermod -a -G g1,g2 byhy # 将byhy用户添加到g2 g3组中  a==append</span><br></pre></td></tr></table></figure><p><strong>文件权限</strong></p><p>Linux文件的访问有三种权限： 读（用字母r表示）、写（用字母w表示）、执行（用字母x表示）</p><p>某个用户 对于一个 文件 ：</p><ul><li><p>有读权限，表示该用户可以<strong>读取</strong>文件的内容，</p></li><li><p>有写权限，表示该用户可以<strong>修改</strong>文件内容，</p></li><li><p>有执行权限, 表示该用户可以<strong>运行</strong>该文件（当然该文件应该是可执行文件）</p></li></ul><p>而 这三种权限 对目录，含义又不一样。</p><p>某个用户 对于一个 目录 ：</p><ul><li><p>有读权限，表示该用户可以查看该目录里面的内容，</p></li><li><p>有写权限，表示该用户可以在该目录里面 创建 和删除 文件，</p></li><li><p>有执行权限, 表示该用户可以使用 cd命令，进入该目录</p></li></ul><p>对 某个文件或者目录，Linux系统需要说明 三种类型的用户 ，分别具有怎样的权限</p><p>这三种类型分别是：</p><ul><li><p>文件的所有者，英文叫 owner ， 也就是 该文件的 创建者</p></li><li><p>文件归属的用户组里面的用户 ，英文叫 grouper，</p></li><li><p>其他用户 (非owner和非grouper)</p></li></ul><p>Linux系统需要为每个文件和目录，指定这个三种类型的用户，具有什么r、w、x里面的哪些权限</p><p>文件存取权限的显示 可以通过”ls -l”命令显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x 3 root root 4096 Jul  8 06:31 h1</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jul  8 06:02 h3</span><br><span class="line">-rw-r--r-- 1 root root  226 Jul  8 06:14 nnu.txt</span><br><span class="line">drwx------ 3 root root 4096 Jul  7 13:25 snap</span><br><span class="line"></span><br><span class="line">d表示dir目录</span><br><span class="line">-表示文件</span><br><span class="line">owner grouper 其他用户</span><br><span class="line"></span><br><span class="line"># g表示同组用户</span><br><span class="line">chmod u+x nnu.txt</span><br><span class="line"></span><br><span class="line">u拥有者(user --- owner)</span><br><span class="line">g与拥有者同一组的用户(group)</span><br><span class="line">o其他人(other)</span><br><span class="line">a所有人(all)</span><br><span class="line"></span><br><span class="line">chmod u+w file1 ，该命令添加了 拥有者对file1文件的写权限</span><br><span class="line"></span><br><span class="line">chmod u-x file1 ，该命令去掉了 拥有者对file1文件的执行权限</span><br><span class="line"></span><br><span class="line">chmod ug+rwx file1 ，该命令添加了 拥有者和同组用户 对file1文件的 读、写、执行权限</span><br><span class="line"></span><br><span class="line">chmod a+rwx file1，该命令添加了 所有人 对file1文件的 读、写、执行权限</span><br><span class="line"></span><br><span class="line">chmod o+rx /root ， 该命令添加了 其它组 对 目录 /root 的可读可执行权限。 对于目录来说 ，可执行权限意味着，用户可以 cd 进入 到这个目录。</span><br><span class="line"></span><br><span class="line">chmod -R o+rx /root ， 参数 -R 表示递归的意思，该命令执行结果是：其它用户可以对 /root 目录以及所有它的子目录、子文件 都有 可读可执行权限 。</span><br><span class="line"></span><br><span class="line">chown byhy test1 ，就把文件test1的所有者变更为用户byhy</span><br><span class="line"></span><br><span class="line">chown byhy:byhy test1 ，就把文件test1的所有者变更为用户byhy，所属组变为byhy</span><br><span class="line"></span><br><span class="line">chown -R byhy dir1 ，就把目录dir1以及下面所有的子目录和文件的所有者变更为用户byhy</span><br><span class="line"></span><br><span class="line">也可以用命令chgrp改变文件所有者组，格式如下</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><p><strong>sudo以root权限运行程序</strong><br>例如：sudo adduser hxh  以root权限添加用户hxh</p><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>windows下的可执行文件.exe<br>正在运行的<strong>实例</strong>称为<strong>进程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps # 查看进程信息</span><br></pre></td></tr></table></figure><p><strong>进程的创建和查看</strong><br>Linux中，一个进程A里面可以创建一个新的进程B，进程A叫做进程B的父进程，B叫做A的子进程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ps 显示和当前终端有关的进程信息</span><br><span class="line"></span><br><span class="line">ps -u byhy 显示byhy用户所创建的进程信息</span><br><span class="line"></span><br><span class="line">ps -f 详细显示每个进程信息</span><br><span class="line"></span><br><span class="line">ps -e 显示所有正在运行的进程信息</span><br><span class="line"></span><br><span class="line">ps -ef 显示当前系统所有的进程</span><br><span class="line"></span><br><span class="line">ps –ef | grep python 查找python进程</span><br></pre></td></tr></table></figure><p><strong>进程的前台、后台转换</strong></p><p>Linux终端通过Shell程序来接收用户输入的命令，并且执行命令。</p><p>我们在Shell里正在执行的，和用户进行人机交互的进程叫 <code>前台进程</code> (foreground process)</p><p>前台进程可以接收键盘输入并将结果显示在显示器上。</p><p>用户敲入什么命令，shell就会启动对应的程序，运行在 <code>前台</code> 。</p><p>有些程序运行时，并不需要和用户进行交互，也就是说，不需要用户输入什么内容。 比如一个日志分析程序，一个定时清理磁盘文件的程序。</p><p>比如，下面这样的一个Python程序 t2.py：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;execute a task ...&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done, wait for an hour to proceed...&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3600</span>)</span><br></pre></td></tr></table></figure><p>我们可以执行命令 <code>python3 t2.py</code> 运行它</p><p>这样的程序，运行期间，如果在前台执行，我们只能等待它结束，不然我们没法执行下个程序。</p><p>但是既然不需要用户输入信息，在前台执行，没有太大意义，我们应该要让它在 <code>后台</code> 执行。</p><p>要让它在后台运行，启动时只需在命令行的最后加上“&amp;”符号。</p><p>比如 <code>python3 t2.py &amp;</code></p><p>后台运行的进程我们叫后台进程(background process)，或者后台任务 ，它不直接和用户进行交互的进程。用户一般是感觉不到后台进程程序的运行。</p><p><strong>nohup</strong></p><p>我们在执行命令时候，使用 &amp; 结尾可以使进程在后台进行。<br>但是如果终端关闭，程序也会被关闭，因为shell会发送SIGHUP信号给这些进程，进程接受的该信号，如果没有特别的处理，缺省就会结束运行。<br>未来避免这种情况，可以使用<strong>nohup</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup python3 xxx.py &amp; # 后台运行xxx.py，且不会因为终端的关闭导致进程结束</span><br></pre></td></tr></table></figure><p><strong>进程的终止</strong></p><ul><li><p>自行终止</p><ul><li>执行完任务自动结束</li><li>ctrl c 结束  &#x2F;  exit</li></ul></li><li><p>被强制杀死</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -1 id # 杀死id号的进程，使用ps查看进程的id号</span><br></pre></td></tr></table></figure></li></ul><h2 id="重定向和管道"><a href="#重定向和管道" class="headerlink" title="重定向和管道"></a>重定向和管道</h2><p><strong>stdin&#x2F;stdout&#x2F;stderr与重定向</strong></p><p>什么是终端？人—终端—程序<br>Linux进程在启动后，通常会打开3个文件句柄，标准输入文件（stdin），标准输出文件（stdout），标准错误文件（stderr）。<br>Linux进程，要从用户那里读入输入的信息，从stdin文件读取信息，输出信息给用户是输出到stdout，输出错误信息是输出到stderr。<br>缺省情况下这三个文件都是指向   终端设备。<br>即：Linux从stdin里面读取信息其实就是从终端设备读取信息<br>Linux进程写入信息到stdout stderr就是打印到终端设备上。</p><p><strong>重定向</strong>：使用**&gt;**符号可以将输出结果输出到其他文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 标准输出重定向</span><br><span class="line">ps &gt; out # 将stdout指向out文件</span><br><span class="line">ps hhh 2&gt; out # 将错误指向out文件，不存在ps hhh的指令</span><br><span class="line">command &amp;&gt; both # 同时重定向</span><br><span class="line">command &gt; out 2&gt; err # 分别重定向 </span><br><span class="line"></span><br><span class="line"># 标准输入重定向</span><br><span class="line">python add.py &lt; add.dat # 将add.dat内容作为add.py的输入</span><br></pre></td></tr></table></figure><p><strong>管道</strong><br>grep命令可以从文件中过滤出包含指定字符串模式的行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep mike file1 # 在file1文件中过滤包含mike的行</span><br><span class="line">ps -ef | grep mike # 使用管道操作符，从ps -ef结果中过滤</span><br></pre></td></tr></table></figure><p><strong>将一个命令的输出内容，作为另一个命令的输入内容。</strong></p><h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h2><p>Advanced Packing Tool </p><p>更改源</p><ol><li>以root账号登录，或者后续命令前面加 <code>sudo</code> 以root执行</li><li>执行命令 <code>cd /etc/apt</code> 进入到目录 <code>/etc/apt</code> 下</li><li>执行命令 <code>cp sources.list sources.list.bak</code> 先创建备份文件，这样万一改错，可以有备份文件恢复</li><li>执行 <code>vi sources.list</code> 打开文件， 准备把域名从从 <code>cn.archive.ubuntu.com</code> 替换为 <code>mirrors.163.com</code></li><li>按 冒号，进入底行模式，输入命令 <code>1,$s/cn.archive.ubuntu.com/mirrors.163.com/g</code> 进行替换</li><li>确认一下域名修改正确后，输入 <code>:wq</code> 保存退出。</li><li>执行命令 <code>apt update</code> ， 让修改生效</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install package1 # 安装装软件</span><br><span class="line">apt list --installed # 列出所有安装信息</span><br><span class="line">apt list package1 # 列出指定程序包信息</span><br><span class="line">apt remove package1 # 删除软件包</span><br></pre></td></tr></table></figure><h2 id="启动、重启、关闭服务"><a href="#启动、重启、关闭服务" class="headerlink" title="启动、重启、关闭服务"></a>启动、重启、关闭服务</h2><p>inux上有些软件程序是以服务的形式安装的，比如 SSH 服务、 MySQL服务、 nginx服务等。</p><p>这些 软件 的启动、重启、关闭 要使用特殊的命令</p><p>在当前的 Ubuntu 系统上，使用命令 systemctl 来 启动、重启、关闭 服务。</p><ul><li><p>要查看 服务 ssh 状态， 执行命令 <code>systemctl status ssh</code></p></li><li><p>要启动 服务 ssh， 执行命令 <code>systemctl start ssh</code></p></li><li><p>要重启 服务 ssh， 执行命令 <code>systemctl restart ssh</code></p></li><li><p>要关闭 服务 ssh， 执行命令 <code>systemctl stop ssh</code></p></li></ul><h2 id="打包与压缩"><a href="#打包与压缩" class="headerlink" title="打包与压缩"></a>打包与压缩</h2><p><strong>打包</strong></p><p>Linux下打包的最常用命令是tar 命令，可将多个文件、目录打包到一个文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar cvf byhy.tar ./byhy  byhy.txt  # tar 命令打包</span><br><span class="line">tar cvf files1.tar *.txt</span><br><span class="line">tar cvf files.tar 123.txt  456.txt 789.txt</span><br><span class="line"></span><br><span class="line">tar xvf files.tar # tar 命令解包</span><br><span class="line"></span><br><span class="line">tar tvf files.tar # 查看包内内容</span><br><span class="line">tar rvf files.tar newfile # 向包内添加内容</span><br></pre></td></tr></table></figure><p>注意：tar命令只是把文件、目录打包到一个文件中。 并不会压缩文件</p><p><strong>压缩</strong></p><p>gzip命令用于文件的压缩与解压缩，压缩后的文件名后缀为“.gz”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip abc.txt # 压缩</span><br><span class="line">gzip -d abc.txt.gz # 解压缩</span><br></pre></td></tr></table></figure><p>gzip 和 tar 的联合使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zcvf byhy.tar.gz  *.txt  打包*.txt再压缩到byhy.tar.gz</span><br></pre></td></tr></table></figure><p>解压缩并解包，使用下面命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf byhy.tar.gz # 解压并解包</span><br></pre></td></tr></table></figure><p>● bzip2、zip 压缩、解压</p><p>bzip2 和 zip 也是常见的压缩解压工具， 使用方法和 gzip 类似</p><p>如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------</span><br><span class="line">.bz2</span><br><span class="line">解压1：bzip2 -d FileName.bz2</span><br><span class="line">解压2：bunzip2 FileName.bz2</span><br><span class="line">压缩： bzip2 -z FileName</span><br><span class="line">.tar.bz2</span><br><span class="line">解压：tar jxvf FileName.tar.bz2</span><br><span class="line">压缩：tar jcvf FileName.tar.bz2 DirName</span><br><span class="line">---------------------------------------------</span><br><span class="line">.zip</span><br><span class="line">解压：unzip FileName.zip</span><br><span class="line">压缩：zip -r FileName.zip DirName</span><br><span class="line">---------------------------------------------</span><br></pre></td></tr></table></figure><p>注意：如果你的Linux上没有安装 bzip2、zip、unzip，可以执行命令 <code>apt install bzip2 zip unzip</code> 来安装。</p><h2 id="查看系统进程的动态运行情况"><a href="#查看系统进程的动态运行情况" class="headerlink" title="查看系统进程的动态运行情况"></a>查看系统进程的动态运行情况</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">top </span><br><span class="line">top -p 5523</span><br><span class="line">free -m # 以m为单位查看</span><br><span class="line">uname –a # 查看系统内核版本信息</span><br></pre></td></tr></table></figure><p>cpu整体负载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cpu(s):  0.0 us,  0.0 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.3 si,  0.0 st</span><br></pre></td></tr></table></figure><p>各个cpu的负载（按键盘1，可以在整体cpu和所有cpu之间切换）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cpu0  :  0.3%us,  0.3%sy,  0.0%ni, 97.7%id,  1.3%wa,  0.0%hi,  0.3%si,  0.0%st</span><br><span class="line">Cpu1  :  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Cpu2  :  0.0%us,  0.3%sy,  0.0%ni, 99.7%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br><span class="line">Cpu3  :  0.0%us,  0.0%sy,  0.0%ni,100.0%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st</span><br></pre></td></tr></table></figure><p>整体内存使用量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KiB Mem :  2895572 total,  2507692 free,   118824 used,   269056 buff/cache</span><br><span class="line">KiB Swap:  3145724 total,  3145724 free,        0 used.  2598756 avail Mem</span><br></pre></td></tr></table></figure><p>​按快捷键大写的 M 可以 对进程列表按照内存使用率来排序，各个进程对内存的占用（RES）</p><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><p>一个网卡可以配置多个网络接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr # 查看ip地址</span><br></pre></td></tr></table></figure><p><strong>启用、禁用网络接口</strong></p><p>启用和禁用网络接口，常用的是 <code>ifup</code> 和 <code>ifdown</code> ，要使用root用户执行<br>Ubuntu 现在缺省是没有这两个命令的， 可以先运行 <code>apt install ifupdown</code> 安装一下。</p><p>● 启用网络接口</p><p>使用命令 ifup，比如下面的命令就是启用网络接口 enp0s3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifup enp0s3</span><br></pre></td></tr></table></figure><p>● 禁用网络接口</p><p>使用命令 ifdown，比如下面的命令就是禁用网络接口 enp0s3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifdown enp0s3</span><br></pre></td></tr></table></figure><p><strong>ping 检测网络连通性</strong></p><p>我们经常需要检查是否可以从本机访问某个远程主机，这时应该使用 <code>ping</code> 命令<br>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ping 192.168.100.1</span><br><span class="line">PING 192.168.100.1 (192.168.100.1) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.100.1: icmp_seq=1 ttl=64 time=0.158 ms</span><br><span class="line">64 bytes from 192.168.100.1: icmp_seq=2 ttl=64 time=0.228 ms</span><br><span class="line">64 bytes from 192.168.100.1: icmp_seq=3 ttl=64 time=0.281 ms</span><br></pre></td></tr></table></figure><p>上面的结果就表示 本机 和 IP 为192.168.100.1 的设备（可能是计算机也可能是路由器）之间的网络是通畅的。<br>可以按 <code>ctrl+C</code> 终止 测试。</p><p><strong>netstat查看网络状态</strong></p><p>Ubuntu 现在缺省安装的查看网络状态的工具是 Socket Statistics， 命令名为 <code>ss</code> 。</p><p>但是 目前这个工具使用还不是特别广泛，目前查看网络状态大多数人还是会使用著名的 <code>netstat</code> 。netstat 这个命令通常用来 查看各种与网络相关的状态信息，包括：网络的连接、状态、接口的统计信息、路由表、端口的监听情况。但是 Ubuntu 现在缺省没有安装这个netstat， 可以使用命令 <code>sudo apt install net-tools</code> 安装 net-tools 工具包后，即可使用。</p><p>常用参数：</p><p><code>-a</code> (all)显示所有选项，默认不显示LISTEN相关</p><p><code>-t</code> (tcp)仅显示tcp相关选项</p><p><code>-u</code> (udp)仅显示udp相关选项</p><p><code>-n</code> 不显示端口协议名，显示端口数字</p><p><code>-l</code> 只显示 Listen (监听) 的状态端口</p><p><code>-p</code> 显示建立相关链接的进程PID</p><p><code>-r</code> 显示路由信息，路由表</p><p><strong>Netstat 最常用的地方就是查看网络连接情况，比如查看22端口上的tcp网络连接情况</strong></p><p>使用命令 <code>netstat -anp | grep 22 | grep tcp</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# netstat -anp |grep 22 |grep tcp</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      977/sshd</span><br><span class="line">tcp        0     52 192.168.10.199:22       192.168.10.92:63911     ESTABLISHED 2011/sshd: root@pts</span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      977/sshd</span><br></pre></td></tr></table></figure><h2 id="SSH-（secure-shell）登录远程机器"><a href="#SSH-（secure-shell）登录远程机器" class="headerlink" title="SSH （secure shell）登录远程机器"></a>SSH （secure shell）登录远程机器</h2><p>之前我们使用的是Windows下面的终端模拟器PuTTY 远程登录Linux主机。在Linux下，也可以远程登录其他Linux主机，只需要运行ssh命令即可。命令的格式如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh  用户名@IP地址或机器域名</span><br></pre></td></tr></table></figure><p>比如，你要 使用 user1 账号 远程登录 192.168.1.12 这台Linux机器，执行下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[byhy@localhost ~]$ ssh user1@192.168.1.12</span><br></pre></td></tr></table></figure><p>一般首次登录某个主机的时候，会出现如下提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;192.168.1.12 (192.168.1.12)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is cf:2c:22:d1:e8:4e:f3:16:43:09:9c:c6:fe:fc:9a:22.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>这是因为该远程机器没有被认证过（可能会有‘中间人’攻击的安全隐患），让你确认一下。这里如果是局域网里面的机器，一般安全没有什么问题，输入yes并回车即可。</p><p>接下来，会提示输入对应用户的密码，你输入正确的密码即可登录。</p><h2 id="scp拷贝文件"><a href="#scp拷贝文件" class="headerlink" title="scp拷贝文件"></a>scp拷贝文件</h2><p>在Linux上，可以直接使用scp命令 和远程Linux主机 进行文件的拷贝。</p><p>scp是secure copy的缩写，意为文件安全拷贝，它可以将远程Linux系统上的文件拷贝到本地计算机，也可以将本地计算机上的文件拷贝到远程Linux系统上。比如：</p><p>我们已经登录到主机A上面，要将 &#x2F;home&#x2F;byhy1 目录下面的文件abc.txt，拷贝到主机B的&#x2F;home&#x2F;byhy2目录下面，主机B的IP地址为：192.168.1.12我们要拷贝到 B主机， 必须要有B主机的用户账号， 假如B主机的账号是 byhy2，应该这样写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /home/byhy1/abc.txt byhy2@192.168.1.12:/home/byhy2</span><br></pre></td></tr></table></figure><p>接下来，会提示用户输入用户byhy2的密码，输入正确密码后，进行拷贝操作。如果，我们要 在主机A上面，将主机B上面的文件&#x2F;home&#x2F;byhy2&#x2F;123.txt 拷贝到主机A的&#x2F;tmp&#x2F;下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp byhy2@192.168.1.12:/home/byhy2/123.txt /tmp/</span><br></pre></td></tr></table></figure><p><strong>winscp</strong></p><p>在windows机器上和远程Linux机器进行文件的拷贝</p><h2 id="wget下载"><a href="#wget下载" class="headerlink" title="wget下载"></a>wget下载</h2><p>Linux中，要从网络下载文件，可以使用 wget。</p><p>wget就是一个下载文件的命令行工具。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/centos/timestamp.txt</span><br></pre></td></tr></table></figure><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>通常网站服务之类的产品运行在Ubuntu上，我们会开启防火墙。防止恶意的网络访问和攻击。</p><p>Ubuntu目前使用命令 <code>ufw</code> (uncomplicated firewall) 管理防火墙功能。</p><p>缺省 ufw 是未被激活的，执行如下命令激活。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ufw enable <span class="comment"># 开启防火墙</span></span><br><span class="line">ufw disable <span class="comment"># 关闭防火墙</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ufw default allow/deny:外来访问默认允许/拒绝</span><br><span class="line"></span><br><span class="line">ufw allow/deny <span class="number">20</span>：允许/拒绝 访问<span class="number">20</span>端口,<span class="number">20</span>后可跟/tcp或/udp，表示tcp或udp封包。</span><br><span class="line"></span><br><span class="line">ufw allow/deny servicename:ufw从/etc/services中找到对应service的端口，进行过滤。</span><br><span class="line"></span><br><span class="line">ufw allow proto tcp <span class="keyword">from</span> <span class="number">10.0</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">10</span> to 本机ip port <span class="number">25</span>:允许自<span class="number">10.0</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">10</span>的tcp封包访问本机的<span class="number">25</span>端口。</span><br><span class="line"></span><br><span class="line">ufw delete allow/deny <span class="number">20</span>:删除以前定义的<span class="string">&quot;允许/拒绝访问20端口&quot;</span>的规则</span><br></pre></td></tr></table></figure><p>注意：这个命令最好是在 虚拟机终端执行。</p><p>如果是Putty远程登录，并且当前没有允许SSH访问的ufw规则，执行这个命令可能就会断开连接。</p><p>可以执行如下命令检查 当前的 防火墙设置</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw status</span><br></pre></td></tr></table></figure><p>或者查看更详细的信息</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw status verbose</span><br></pre></td></tr></table></figure><p>● 开放端口</p><p>如果我们允许 外面从网络访问本机的 SSH TCP 服务端口 22 ，应该这样执行命令</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow <span class="number">22</span>/tcp</span><br></pre></td></tr></table></figure><p>如果你知道端口对应的服务名，也可以使用名字。</p><p>比如下面的命令可以允许外面从网络访问 本机的 ssh 服务</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow ssh</span><br></pre></td></tr></table></figure><p>比如下面的命令可以允许外面从网络访问 本机的 HTTP 服务端口 80</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw allow http</span><br></pre></td></tr></table></figure><p>● 删除规则</p><p>要删除一个前面设定的规则，执行下面的命令</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ufw delete allow http</span><br></pre></td></tr></table></figure><h1 id="一些配置操作"><a href="#一些配置操作" class="headerlink" title="一些配置操作"></a>一些配置操作</h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建</title>
      <link href="/2023/08/24/a/"/>
      <url>/2023/08/24/a/</url>
      
        <content type="html"><![CDATA[<p>之前用原生代码编写了个人的博客主页，明显不够酷炫。今天用hexo + butterfly重新搭建一个。</p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> NNU </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
